// Package employee_api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package employee_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Employee defines model for Employee.
type Employee struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// ListBusinessResponse defines model for ListBusinessResponse.
type ListBusinessResponse struct {
	Employees *[]Employee `json:"employees,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	BusinessName string `json:"businessName"`
	Password     string `json:"password"`
	Username     string `json:"username"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	BusinessId *string `json:"businessId,omitempty"`
}

// PostEmployeeLoginJSONBody defines parameters for PostEmployeeLogin.
type PostEmployeeLoginJSONBody LoginRequest

// PostEmployeeBusinessIdJSONBody defines parameters for PostEmployeeBusinessId.
type PostEmployeeBusinessIdJSONBody Employee

// PostEmployeeLoginRequestBody defines body for PostEmployeeLogin for application/json ContentType.
type PostEmployeeLoginJSONRequestBody PostEmployeeLoginJSONBody

// PostEmployeeBusinessIdRequestBody defines body for PostEmployeeBusinessId for application/json ContentType.
type PostEmployeeBusinessIdJSONRequestBody PostEmployeeBusinessIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /employee/login)
	PostEmployeeLogin(ctx echo.Context) error

	// (GET /employee/{businessId})
	GetEmployeeBusinessId(ctx echo.Context, businessId string) error

	// (POST /employee/{businessId})
	PostEmployeeBusinessId(ctx echo.Context, businessId string) error

	// (DELETE /employee/{businessId}/{username})
	DeleteEmployeeBusinessIdUsername(ctx echo.Context, businessId string, username string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostEmployeeLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostEmployeeLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEmployeeLogin(ctx)
	return err
}

// GetEmployeeBusinessId converts echo context to params.
func (w *ServerInterfaceWrapper) GetEmployeeBusinessId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEmployeeBusinessId(ctx, businessId)
	return err
}

// PostEmployeeBusinessId converts echo context to params.
func (w *ServerInterfaceWrapper) PostEmployeeBusinessId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEmployeeBusinessId(ctx, businessId)
	return err
}

// DeleteEmployeeBusinessIdUsername converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEmployeeBusinessIdUsername(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameter("simple", false, "username", ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEmployeeBusinessIdUsername(ctx, businessId, username)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/employee/login", wrapper.PostEmployeeLogin)
	router.GET(baseURL+"/employee/:businessId", wrapper.GetEmployeeBusinessId)
	router.POST(baseURL+"/employee/:businessId", wrapper.PostEmployeeBusinessId)
	router.DELETE(baseURL+"/employee/:businessId/:username", wrapper.DeleteEmployeeBusinessIdUsername)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWTWvcMBD9K2Lao4k3aS/1rWlKCJRSAj2FHLTy7FpBlhTNeMOy+L8XyWt7N3bSpaS0",
	"N1kf897Mmyd5B8rV3lm0TFDsgFSFtUzDr7U3bosYxz44j4E1phUviZ5cKOOYtx6hAOKg7RraDBrCYGWN",
	"M4ttBgEfGx2whOJu3JmNEe+z/pBbPqDiGPGbJr5sSFskukXyztIMKdzTTR+asU6D9wFXUMC7fEwz3+eY",
	"Dwm2A6gMQW4T0SkLt9b2Fh8bJJ6iL/f8vs9nnr1VzY5wstNL2JF/qXZ91JtynsGzeHFK25VLmzWbuDYU",
	"M4MNBtLOQgHnZ4uI7jxa6TUU8OFscXaRyHKVkPNettxEioma6wpcIqmgPXehUgbiSXMluELRJy6kLcWQ",
	"eoIKMh6JqcAPR9wTSwGgqyYSX7pyG1GUs4w2AUrvjVbpdP5Azo5++F0nHfVGe6wZhwbTRFf8lPXFYvHW",
	"2HtpE/hx5T43XKHlGB1LQY1SSLRqjImNHrePGuzGRmgj7hpnlLhGFkYTC7cSg+nihxT98YkQ1zjocDn2",
	"WuyDIGtkDATF3Q5iA6TegAw6Pxy25vOqZgcVOqZ4cxX5HLB53tL3f1OQuetqRpd+j4hWCnWCEgE5aNzM",
	"CJW9YIwvASXjoISQSrnGcmeVtd6g/QOz/D8ivb1Zx2v/FKOeT4n3AUQlSSwR7ZFWQiVBylfNle96Tdou",
	"vkHGKdJVmhfSjvK+7rPuwFTFn4fvxL9RM5vFOnjATkWKT9/h3XOSvT++ImNX/Zmrsc2AMGz6UjXBQAEV",
	"sy/y3DglTeWIi513gdtcep1vziGbvFtKGtGFiW+jDFouzf4/yoW9oVeyMQwFfFosFhH6vv0VAAD//3dm",
	"EAGZCQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
