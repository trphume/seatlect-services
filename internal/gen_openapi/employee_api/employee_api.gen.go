// Package employee_api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package employee_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Employee defines model for Employee.
type Employee struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// ListBusinessResponse defines model for ListBusinessResponse.
type ListBusinessResponse struct {
	Employees *[]Employee `json:"employees,omitempty"`
}

// PostEmployeeBusinessIdJSONBody defines parameters for PostEmployeeBusinessId.
type PostEmployeeBusinessIdJSONBody Employee

// PostEmployeeBusinessIdRequestBody defines body for PostEmployeeBusinessId for application/json ContentType.
type PostEmployeeBusinessIdJSONRequestBody PostEmployeeBusinessIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /employee/{businessId})
	GetEmployeeBusinessId(ctx echo.Context, businessId string) error

	// (POST /employee/{businessId})
	PostEmployeeBusinessId(ctx echo.Context, businessId string) error

	// (DELETE /employee/{businessId}/{username})
	DeleteEmployeeBusinessIdUsername(ctx echo.Context, businessId string, username string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetEmployeeBusinessId converts echo context to params.
func (w *ServerInterfaceWrapper) GetEmployeeBusinessId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEmployeeBusinessId(ctx, businessId)
	return err
}

// PostEmployeeBusinessId converts echo context to params.
func (w *ServerInterfaceWrapper) PostEmployeeBusinessId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEmployeeBusinessId(ctx, businessId)
	return err
}

// DeleteEmployeeBusinessIdUsername converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEmployeeBusinessIdUsername(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameter("simple", false, "username", ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEmployeeBusinessIdUsername(ctx, businessId, username)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/employee/:businessId", wrapper.GetEmployeeBusinessId)
	router.POST(baseURL+"/employee/:businessId", wrapper.PostEmployeeBusinessId)
	router.DELETE(baseURL+"/employee/:businessId/:username", wrapper.DeleteEmployeeBusinessIdUsername)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8yVQW/bPAyG/4rA7zsatdvtMh+7DkOBYhgG7FT0oNhMo8KWVJJOERj+7wPl2EnjrOhh",
	"wHaKbIkvX/ohlR6q0Mbg0QtD2QNXG2xtWn5pYxN2iLqOFCKSOEw70TK/BKp1LbuIUAILOf8IQwYdI3nb",
	"4pnNIQPC584R1lDeH05mB8WHbAoKqyesRBXvHMt1x84j8w/kGDyfMYV7u+nBCbZp8T/hGkr4Lz+Ume9r",
	"zOcChzmpJbK7ZPTEhb5yfh1SVU4a3ZvjM9gisQseSri8KFQvRPQ2Oijhw0VxcZVKlE2ylE9O8361r+q2",
	"HnTnEUV/auSKXJRR8CuKaRyLCWsz16gP1kzhkPKR1YjbeoyZzF3PKZIHsi0KEkN534NTffUFGYzIYHV8",
	"/ABLqMNs3xxLi7c36ufIzSn3B9UawaVPcFUU+lMFL+hTzTbGxlWpgvyJVbU/SvcWxbPdkXi9NjmdMYqR",
	"2pTKEAo53GJtuKsqZF53TbMbw2PgMzg+E1rBmYSxVRU6L+bFycY8ui16M/W1sb42c2efMvoe+B+E9Nwh",
	"y3Wod3+Mz2HKXs+/uh0WfXG5ND4JmI1ls0L0r1iZKgGpVX7IfjNceT8xGUb9BgWXmW7Se2P9Ae/bczYG",
	"LCn+PL7Z/g7N7Gyuoyv3vZm+aScf3T3vGu+Pb2Acv/5y4hQfI22nT9VRAyVsRGKZ502obLMJLGUfA8mQ",
	"2+jy7SWcTvmdnjOjjN7LlpxdNfu/rUD7gV7brhEo4VNRFJr6YfgVAAD//yBKmIIIBwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
