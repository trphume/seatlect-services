// Package admin_api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package admin_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// PostAdminLoginJSONBody defines parameters for PostAdminLogin.
type PostAdminLoginJSONBody LoginRequest

// PostAdminLoginRequestBody defines body for PostAdminLogin for application/json ContentType.
type PostAdminLoginJSONRequestBody PostAdminLoginJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /admin/login)
	PostAdminLogin(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAdminLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostAdminLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAdminLogin(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/admin/login", wrapper.PostAdminLogin)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/4RSTW/UMBD9K9bAMdpkSzngW5E4IHFAIE5VD64z2bg4M+54sqtqlf+O7E1ZVovUmxPP",
	"e/M+fATPU2JC0gz2CNmPOLl6/Ma7QD/wecas5TsJJxQNWG+Ty/nA0pezviQEC1kl0A6WBuaMQm7C/1wu",
	"DQg+z0GwB3t/nmzOjA/NK4gfn9ArLAUVaODC12P2EpIGJrDwhfrEgdQMLOYnOo3o1bh+CmQmR26HE5Ka",
	"FJ0OLBM0oEFj4b4rM9DAHiWfuLabrojnhORSAAsfNt3mpirTsZpuK3EbSzI1BD5Fc6mpBrdqOAQdzS7s",
	"kcyrVeOoN3/N1n3iCvRrDxa+c9YqrbLAKS3M+pn7l7LKMylS3epSisFXaPuUmc79ldN7wQEsvGvPBbdr",
	"u+1FtctlJyoz1h85MeVT2Tfd7bXNu1lHJF0VmIPLJs/eY87DHEuQt932TdTgQsT+35i8YF8GXMyF5GPX",
	"XZP8ot/EBzIowmLY+1mK9mWpXjJKKRXs/RFmiWBhVE22bSN7F0fOao+JRZfWpdDut9BcFehdNCea8kKc",
	"BPcY13fPslY+uDkqWPjUdV1Z/bD8CQAA///ol3H2TQMAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
