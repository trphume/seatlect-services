// Package placement_api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package placement_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Placement defines model for Placement.
type Placement struct {
	Height *int    `json:"height,omitempty"`
	Seats  *[]Seat `json:"seats,omitempty"`
	Width  *int    `json:"width,omitempty"`
}

// Seat defines model for Seat.
type Seat struct {
	Floor    *int     `json:"floor,omitempty"`
	Height   *float32 `json:"height,omitempty"`
	Name     *string  `json:"name,omitempty"`
	Rotation *float32 `json:"rotation,omitempty"`
	Space    *int     `json:"space,omitempty"`
	Type     *string  `json:"type,omitempty"`
	Width    *float32 `json:"width,omitempty"`
	X        *float32 `json:"x,omitempty"`
	Y        *float32 `json:"y,omitempty"`
}

// PutPlacementBusinessIdJSONBody defines parameters for PutPlacementBusinessId.
type PutPlacementBusinessIdJSONBody Placement

// PutPlacementBusinessIdRequestBody defines body for PutPlacementBusinessId for application/json ContentType.
type PutPlacementBusinessIdJSONRequestBody PutPlacementBusinessIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /placement/{businessId})
	GetPlacementBusinessId(ctx echo.Context, businessId string) error

	// (PUT /placement/{businessId})
	PutPlacementBusinessId(ctx echo.Context, businessId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPlacementBusinessId converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlacementBusinessId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlacementBusinessId(ctx, businessId)
	return err
}

// PutPlacementBusinessId converts echo context to params.
func (w *ServerInterfaceWrapper) PutPlacementBusinessId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPlacementBusinessId(ctx, businessId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/placement/:businessId", wrapper.GetPlacementBusinessId)
	router.PUT(baseURL+"/placement/:businessId", wrapper.PutPlacementBusinessId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xUT4vbPhD9KmJ+v2NYe7en+hhaSqCHpaWnsgdZHsdaZEk7GqUNwd+9SEri/DGll0JP",
	"sebPm6f3NDmAcqN3Fi0HaA4Q1ICjzJ/PRioc0XI6eHIeiTXm1IB6O+Q47z1CA9oybpFgWkFAWaA045g/",
	"/ifsoYH/qnlUdZxTfUXJqeuII4nkPp1/6I6HpQFzrWtfUeXmDHJHsjfO0TLHO/42jm1JWTniRSIwabtN",
	"CXIsWTu72BW8VLg8q0QWAG+vOKP9XIzuF6L3aqSQtr1LxR0GRdoX1vDRdt5py6J3JJJkBhUL2Y3ailFa",
	"uc1mC28k945GWAFrNgl7fgkr2CGFgvf4UCdazqOVXkMD7x7qhydYgZc8ZAcqf2qsDm0M2mIIm25KqS3y",
	"PcNPyGJ9rBP+YmiyNYu/6UrZmdH6DJsHkxyRkQI032/BNx+E6wUPeB4BSSloMl84OQ/tJSLhW9SEHTRM",
	"EVfH9Viwc3pJxcE7G8rre6rr9KOc5eMKSe+NVvka1WsoD2nG+92SzPpne6/v9QWZNO6wE+2ddCJEpTCE",
	"PhqzL80+Lgj/zXeS8U+0f47/qvZvEQOvXbf/W7Jf85mW/b6+9xlBxKxwl5Cm/CdJu5NUkQw0MDD7pqqM",
	"U9IMLnBz8I54qqTX1e4Rbl3/nOpEgUlbKUnL1hQqqbFw6WU0DA28r+s6jX6ZfgUAAP//RMw6ffAFAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
