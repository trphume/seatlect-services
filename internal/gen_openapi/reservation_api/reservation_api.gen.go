// Package reservation_api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package reservation_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// CreateReservationRequest defines model for CreateReservationRequest.
type CreateReservationRequest struct {
	End   *string `json:"end,omitempty"`
	Name  *string `json:"name,omitempty"`
	Start *string `json:"start,omitempty"`
}

// GetReservationResponse defines model for GetReservationResponse.
type GetReservationResponse struct {
	Reservation *Reservation `json:"reservation,omitempty"`
}

// ListReservationRequest defines model for ListReservationRequest.
type ListReservationRequest struct {
	End   *string `json:"end,omitempty"`
	Start *string `json:"start,omitempty"`
}

// ListReservationResponse defines model for ListReservationResponse.
type ListReservationResponse struct {
	Reservations *[]Reservation `json:"reservations,omitempty"`
}

// Placement defines model for Placement.
type Placement struct {
	Height *int    `json:"height,omitempty"`
	Seats  *[]Seat `json:"seats,omitempty"`
	Width  *int    `json:"width,omitempty"`
}

// Reservation defines model for Reservation.
type Reservation struct {
	End       *string    `json:"end,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Placement *Placement `json:"placement,omitempty"`
	Start     *string    `json:"start,omitempty"`
}

// Seat defines model for Seat.
type Seat struct {
	Floor    *int     `json:"floor,omitempty"`
	Height   *float32 `json:"height,omitempty"`
	Name     *string  `json:"name,omitempty"`
	Rotation *float32 `json:"rotation,omitempty"`
	Space    *int     `json:"space,omitempty"`
	Status   *string  `json:"status,omitempty"`
	Type     *string  `json:"type,omitempty"`
	User     *string  `json:"user,omitempty"`
	Width    *float32 `json:"width,omitempty"`
	X        *float32 `json:"x,omitempty"`
	Y        *float32 `json:"y,omitempty"`
}

// GetReservationBusinessIdJSONBody defines parameters for GetReservationBusinessId.
type GetReservationBusinessIdJSONBody ListReservationRequest

// PostReservationBusinessIdJSONBody defines parameters for PostReservationBusinessId.
type PostReservationBusinessIdJSONBody CreateReservationRequest

// GetReservationBusinessIdRequestBody defines body for GetReservationBusinessId for application/json ContentType.
type GetReservationBusinessIdJSONRequestBody GetReservationBusinessIdJSONBody

// PostReservationBusinessIdRequestBody defines body for PostReservationBusinessId for application/json ContentType.
type PostReservationBusinessIdJSONRequestBody PostReservationBusinessIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /reservation/{businessId})
	GetReservationBusinessId(ctx echo.Context, businessId string) error

	// (POST /reservation/{businessId})
	PostReservationBusinessId(ctx echo.Context, businessId string) error

	// (GET /reservation/{businessId}/{reservationId})
	GetReservationBusinessIdReservationId(ctx echo.Context, businessId string, reservationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetReservationBusinessId converts echo context to params.
func (w *ServerInterfaceWrapper) GetReservationBusinessId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReservationBusinessId(ctx, businessId)
	return err
}

// PostReservationBusinessId converts echo context to params.
func (w *ServerInterfaceWrapper) PostReservationBusinessId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostReservationBusinessId(ctx, businessId)
	return err
}

// GetReservationBusinessIdReservationId converts echo context to params.
func (w *ServerInterfaceWrapper) GetReservationBusinessIdReservationId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// ------------- Path parameter "reservationId" -------------
	var reservationId string

	err = runtime.BindStyledParameter("simple", false, "reservationId", ctx.Param("reservationId"), &reservationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reservationId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReservationBusinessIdReservationId(ctx, businessId, reservationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/reservation/:businessId", wrapper.GetReservationBusinessId)
	router.POST(baseURL+"/reservation/:businessId", wrapper.PostReservationBusinessId)
	router.GET(baseURL+"/reservation/:businessId/:reservationId", wrapper.GetReservationBusinessIdReservationId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWQW/bPAz9KwK/72jUaXeaj92GokAPRXYcelBsOlZhSypFpwuC/PdBUtI4sVwkKIod",
	"digakxT5Hh8pewOl6azRqNlBsQFXNtjJ8PMboWSco0NaSVZGz/GlR8feZ8lYJFYYIlFX/h+vLUIBjknp",
	"JWwz0LLDpMOxJE54ttneYhbPWLKPvUM+wuCs0Q7HIOgQ5B//J6yhgP/yA798Ry4f5EvXfFCOP0L8En6j",
	"WmcQDM+KsXMXUX2rLonkOg3nsZUldqgTbBtUy2ZIS2nGJVJgjJLPR/UTJY/hZPCqKm5SBVJI58eCf3Ak",
	"7ZD3e9gPDbpQ6EB6BLRujaF0T0f91n23iK5JGmT4rSOjU87KEif0Y8m9S6aMhoSjd0hJx6mMBwS/k9Z1",
	"wjruoDcpXRsfXKErSdnIFH7oyhqlWdSGhG9ziyULWXVKi05quQx6CdtKrg11kAErbn3u4QxlsEJyMeP1",
	"1cwDMxa1tAoK+HI1u7qBDKzkJrQpH6xjvln0Tml07r7aeucSeYzSL7qQYh8qjvY51KLwcF9BcXLr3b6l",
	"DxBIdshIDopfp0XuvwtTC25Q7M+A7xoUATnsJwcWw4yEL70irKBg6jHbvQRSY/0Ug9HxramCbKXRvNsa",
	"aW2rytiRZxdn8JDqvZ2auG+D5MfggiHekEGGm9ns81DsbuIA47jNc2RSuMJKtF5VUx+pKVxfluhc3bft",
	"Oh63xiVGIr5ihRQaX4cZRuPwaNy/NA+Tnx5nTcT1uNGDVCImr3yubTa9x/lm4Hlvr+/Qr/UgWCzWQlVn",
	"r/R8WOYv65lN1/N/xyOaKEsnXC6cpE9a7IlPyMReey2HSp4u8jZ86tBqL05PLRTQMNsiz1tTyrYxjouN",
	"NcTbXFqVr67htMiDjxMxjX/rSFJy0Uba/mAcsVr2LUMBX2ezmS/9tP0TAAD//6UYY0isCwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
