// Package order_api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package order_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// VerifyRequest defines model for VerifyRequest.
type VerifyRequest struct {
	OrderId       string `json:"orderId"`
	ReservationId string `json:"reservationId"`
}

// VerifyResponse defines model for VerifyResponse.
type VerifyResponse struct {
	Seats *[]string `json:"seats,omitempty"`
}

// PostOrderVerifyJSONBody defines parameters for PostOrderVerify.
type PostOrderVerifyJSONBody VerifyRequest

// PostOrderVerifyRequestBody defines body for PostOrderVerify for application/json ContentType.
type PostOrderVerifyJSONRequestBody PostOrderVerifyJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /order/verify)
	PostOrderVerify(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostOrderVerify converts echo context to params.
func (w *ServerInterfaceWrapper) PostOrderVerify(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostOrderVerify(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/order/verify", wrapper.PostOrderVerify)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xSvW7bQAx+FYHtaPiUdOqN3QoUaNGhS5DhLNHVBfLxQlIGDMPvXpAnp7CbsduBIr9f",
	"nWGgQ6WCRQXiGWSY8JD8+Qs5708/8XVBURtUpoqsGf0z8Yj8dbSnnipCBFHO5TdcNsAoyMekmcq7G77y",
	"umTGEeLTG9T94fPmeki7FxzUoK+qpFIR/FeWYGpOsuJB3lW3DhJzOrmWOxIb5bInP84627fvJhE2cESW",
	"TAUiPGx7A6OKJdUMET5t++0jbKAmnZw4uK9wdMWulFqQI8rAuWoDao46nbCjlcUMvaUHP0jU+dsmtPBQ",
	"9AuNjjtQUSwOnWqd8+C34UUM/9qpvT4y7iHCh/C39LA2Hm7rvtx2pLxg69Vjd3uPff/fyddWnf02JQ+g",
	"m5J0O8TSeagZR1u1ZfttkAXi0xkWniHCpFpjCDMNaZ5INJ4rsV5CqjkcH+Ae/5vtdQ3Gek6c025uTu2w",
	"9bZPy6wQ4XPf90b9fPkTAAD//3gjC+ZBAwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
